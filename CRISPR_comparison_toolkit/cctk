#!/usr/bin/env python3

__version__ = "0.8.3"
__author__ = "Alan Collins"

import sys
import argparse

# cctk imports
from cctkpkg import CRISPRtree
from cctkpkg import CRISPRdiff
from cctkpkg import network
from cctkpkg import evolve
from cctkpkg import minced
from cctkpkg import blast
from cctkpkg import spacerblast
from cctkpkg import constrain

description = """
usage: cctk [-h] [--version] <command>

optional arguments:
  -h, --help  show this help message and exit
  --version   show program's version number and exit

Call any command followed by -h or --help to show help for that command

Find CRISPR arrays in assemblies:
  blast        find CRISPR arrays with user-provided repeat(s) using BLASTn
  minced       find CRISPR arrays using MINced

Analyze the differences between CRISPR arrays:
  crisprdiff   produce a CRISPRdiff plot comparing CRISPR arrays
  crisprtree   perform a maximum parsimony analysis on CRISPR arrays
  constrain    infer evolution of CRISPR arrays given a tree topology
  network      produce a network representation of spacer sharing among arrays

Other:
  evolve       perform in silico evolution of CRISPR arrays
  spacerblast  BLAST spacers against a BLASTdb, process output & check for PAMs
"""

class MyArgumentParser(argparse.ArgumentParser):
	# Custom subclass to allow custom help messages in subcommands.
	def print_help(self, message = ""):
		if self.prog == "cctk":
			message = description
		elif self.prog == "cctk blast":
			message = blast.description
		elif self.prog == "cctk minced":
			message = minced.description
		elif self.prog == "cctk crisprdiff":
			message = CRISPRdiff.description
		elif self.prog == "cctk crisprtree":
			message = CRISPRtree.description
		elif self.prog == "cctk constrain":
			message = constrain.description
		elif self.prog == "cctk network":
			message = network.description
		elif self.prog == "cctk evolve":
			message = evolve.description
		elif self.prog == "cctk spacerblast":
			message = spacerblast.description
		print(message)

def parse_args(args=None):
	cli = MyArgumentParser(
		formatter_class=argparse.RawDescriptionHelpFormatter)
	cli.add_argument(
		"--version",
		action="version",
		version=f"%(prog)s {__version__}")

	subparsers = cli.add_subparsers(
		title="Available commands in the CRISPR comparison toolkit",
		dest="command",
		description=description,
		help=argparse.SUPPRESS)

	# CRISPR array finding tools
	
	# blast.py CLI options
	blastcli = subparsers.add_parser(
		'blast',
		help="Find CRISPR arrays with the provided repeat using BLASTn."
		)
	blastcli = blast.build_parser(blastcli)

	# minced.py CLI options
	mincedcli = subparsers.add_parser(
		'minced',
		help="Find CRISPR arrays using minced."
		)
	mincedcli = minced.build_parser(mincedcli)
	
	# CRISPRtree.py CLI options
	treecli = subparsers.add_parser(
		'crisprtree',
		help="Perform a maximum parsimony analysis on CRISPR arrays.")
	treecli = CRISPRtree.build_parser(treecli)

	# CRISPRdiff.py CLI options
	diffcli = subparsers.add_parser(
		'crisprdiff',
		help="Produce a CRISPRdiff plot comparing CRISPR arrays.")
	diffcli = CRISPRdiff.build_parser(diffcli)

	constraincli = subparsers.add_parser(
		'constrain',
		help="predict array relationships constrained by a tree."
		)
	constraincli = constrain.build_parser(constraincli)

	networkcli = subparsers.add_parser(
		'network',
		help="Produce a network representation of spacer sharing among arrays."
		)
	networkcli = network.build_parser(networkcli)

	# evolve.py CLI options
	evolvecli = subparsers.add_parser(
		'evolve',
		help="Perform in silico evolution of CRISPR arrays."
		)
	evolvecli = evolve.build_parser(evolvecli)

	# spacerblast.py CLI options
	spacerblastcli = subparsers.add_parser(
		'spacerblast',
		help="BLAST spacers against something, process output & check for PAMs."
		)
	spacerblastcli = spacerblast.build_parser(spacerblastcli)


	args = cli.parse_args(args)

	return args


def main():

	if len(sys.argv) == 1:
		parse_args(['--help'])
	else:
		if len(sys.argv) == 2:
			sys.argv.append('--help')
		args = parse_args()


	if args.command == "evolve":
		evolve.main(args)
	elif args.command == "crisprtree":
		CRISPRtree.main(args)
	elif args.command == "crisprdiff":
		CRISPRdiff.main(args)
	elif args.command == "blast":
		blast.main(args)
	elif args.command == "minced":
		minced.main(args)
	elif args.command == "spacerblast":
		spacerblast.main(args)
	elif args.command == "network":
		network.main(args)
	elif args.command == "constrain":
		constrain.main(args)

if __name__ == '__main__':
	main()
