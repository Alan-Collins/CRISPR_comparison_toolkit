#!/usr/bin/env python3

__version__ = "0.2.3"
__author__ = "Alan Collins"

import sys
import argparse

# cctk imports
from cctkpkg import CRISPRtree
from cctkpkg import CRISPRdiff
from cctkpkg import evolve_array
from cctkpkg import minced2arrays
from cctkpkg import blast2arrays
from cctkpkg import CRISPRspacers2network
from cctkpkg import process_CRISPR_blast

description = """
Call any command followed by -h or --help to show help for that command

Find CRISPR arrays in assemblies:
  blast        find CRISPR arrays with user-provided repeat(s) using BLASTn
  minced       find CRISPR arrays using minced

Analyze the differences between CRISPR arrays:
  CRISPRdiff   produce a CRISPRdiff plot comparing CRISPR arrays
  CRISPRtree   perform a maximum parsimony analysis on CRISPR arrays
  constrain    predict array relationships constrained by a tree ## TO ADD ##
  network      produce a network representation of spacer sharing among arrays

Other:
  evolve       perform in silico evolution of CRISPR arrays
  spacerblast  BLAST spacers against something, process output & check for PAMs

"""

def parse_args(args=None):
	cli = argparse.ArgumentParser(
		formatter_class=argparse.RawDescriptionHelpFormatter)
	cli.add_argument(
		"--version",
		action="version",
		version=f"%(prog)s {__version__}")

	subparsers = cli.add_subparsers(
		title="Available commands in the CRISPR comparison toolkit",
		dest="command",
		description=description,
		help=argparse.SUPPRESS)

	# CRISPR array finding tools
	
	# blast2arrays.py CLI options
	blast = subparsers.add_parser(
		'blast',
		help="Find CRISPR arrays with the provided repeat using BLASTn."
		)
	blast = blast2arrays.build_parser(blast)

	# minced2arrays.py CLI options
	minced = subparsers.add_parser(
		'minced',
		help="Find CRISPR arrays using minced."
		)
	minced = minced2arrays.build_parser(minced)
	
	# CRISPRtree.py CLI options
	tree = subparsers.add_parser(
		'CRISPRtree',
		help="Perform a maximum parsimony analysis on CRISPR arrays.")
	tree = CRISPRtree.build_parser(tree)

	# CRISPRdiff.py CLI options
	diff = subparsers.add_parser(
		'CRISPRdiff',
		help="Produce a CRISPRdiff plot comparing CRISPR arrays.")
	diff = CRISPRdiff.build_parser(diff)

	# CRISPRspacers2network.py CLI options
	network = subparsers.add_parser(
		'network',
		help="Produce a network representation of spacer sharing among arrays."
		)
	network = CRISPRspacers2network.build_parser(network)

	# evolve_array.py CLI options
	evolve = subparsers.add_parser(
		'evolve',
		help="Perform in silico evolution of CRISPR arrays."
		)
	evolve = evolve_array.build_parser(evolve)

	# process_CRISPR_blast.py CLI options
	spacerblast = subparsers.add_parser(
		'spacerblast',
		help="BLAST spacers against something, process output & check for PAMs."
		)
	spacerblast = process_CRISPR_blast.build_parser(spacerblast)


	args = cli.parse_args(args)

	return args


def main():

	if len(sys.argv) == 1:
		parse_args(['--help'])
	else:
		args = parse_args()

	if args.command == "evolve":
		evolve_array.main(args)
	elif args.command == "CRISPRtree":
		CRISPRtree.main(args)
	elif args.command == "CRISPRdiff":
		CRISPRdiff.main(args)
	elif args.command == "blast":
		blast2arrays.main(args)
	elif args.command == "minced":
		minced2arrays.main(args)
	elif args.command == "CRISPRtree":
		CRISPRtree.main(args)
	elif args.command == "CRISPRtree":
		CRISPRtree.main(args)
	elif args.command == "spacerblast":
		process_CRISPR_blast.main(args)

if __name__ == '__main__':
	main()
